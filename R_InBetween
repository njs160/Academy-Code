# ============================================================================
# COMPLETE KRUSKAL-WALLIS ANALYSIS WITH JPEG EXPORT TO DOWNLOADS
# ============================================================================

# Clear workspace
rm(list = ls())

# Load required libraries
library(haven)
library(dplyr)
library(ggplot2)
library(ggsignif)
library(patchwork)
library(dunn.test)
library(psych)

# ============================================================================
# STEP 1: LOAD AND PREPARE DATA
# ============================================================================

cat("============================================================================\n")
cat("STARTING KRUSKAL-WALLIS ANALYSIS\n")
cat("============================================================================\n\n")

# Load imputed dataset
cat("Loading data...\n")
load("~/Desktop/PhD/John Jay/Research/Academy/Post-Leoka (Second)/Analysis/R/Post_ImputedAug2_R.RData")

# Check and assign data
if(exists("data_imputed")) {
  data <- data_imputed[data_imputed$.imp == 1, ]
  cat("✅ Loaded imputed data (using imputation 1)\n")
  cat("   Dimensions:", nrow(data), "rows x", ncol(data), "columns\n\n")
} else {
  stop("ERROR: data_imputed not found in the loaded RData file")
}

# ============================================================================
# STEP 2: CREATE FACTOR SCORES
# ============================================================================

cat("Creating factor scores...\n")

# Function for factor analysis
perform_factor_analysis <- function(data, vars, factor_name) {
  vars_exist <- vars[vars %in% names(data)]
  if(length(vars_exist) < 2) {
    warning(paste("Not enough variables for", factor_name))
    return(data)
  }
  factor_data <- data[, vars_exist]
  fa_result <- fa(factor_data, nfactors = 1, rotate = "varimax", scores = "regression")
  data[[factor_name]] <- as.vector(fa_result$scores)
  return(data)
}

# Create factors
force_vars <- c("emv", "def_tac", "fire_skill", "nonl")
data <- perform_factor_analysis(data, force_vars, "force_based")
cat("   ✓ Force-based factor created\n")

contemporary_vars <- c("comm", "ethic", "prof", "cult")
data <- perform_factor_analysis(data, contemporary_vars, "contemporary_study")
cat("   ✓ Contemporary study factor created\n")

special_vars <- c("jjl", "traf_law", "domv", "victim")
data <- perform_factor_analysis(data, special_vars, "special_study")
cat("   ✓ Special study factor created\n")

# Create total variables
if(!"total_inj" %in% names(data)) {
  data$total_inj <- rowSums(data[,c("total_inj_firearms", "total_inj_knife", 
                                     "total_inj_other", "total_inj_hands")], na.rm = TRUE)
  cat("   ✓ Total injuries variable created\n")
}

if(!"total_incidents" %in% names(data)) {
  data$total_firearms <- data$total_inj_firearms + data$total_noninj_firearms
  data$total_knife <- data$total_inj_knife + data$total_noninj_knife
  data$total_other <- data$total_inj_other + data$total_noninj_other
  data$total_hands <- data$total_inj_hands + data$total_noninj_hands
  data$total_incidents <- rowSums(data[,c("total_firearms", "total_knife", 
                                          "total_other", "total_hands")], na.rm = TRUE)
  cat("   ✓ Total incidents variable created\n")
}

# Label agency type
if("agency_type3" %in% names(data)) {
  data$agency_type3 <- factor(data$agency_type3,
                              levels = c(1, 2, 3),
                              labels = c("Regular", "College", "Other"))
  cat("   ✓ Agency type labeled\n\n")
}

# ============================================================================
# STEP 3: REMOVE OUTLIERS
# ============================================================================

cat("Removing outliers (1.25×IQR method)...\n")

remove_outliers <- function(df, variable, group_var, iqr_multiplier = 1.25) {
  var_name <- deparse(substitute(variable))
  
  cleaned_df <- df %>%
    group_by({{ group_var }}) %>%
    filter(
      !is.na({{ variable }}),
      {{ variable }} > quantile({{ variable }}, 0.25, na.rm = TRUE) - 
        iqr_multiplier * IQR({{ variable }}, na.rm = TRUE),
      {{ variable }} < quantile({{ variable }}, 0.75, na.rm = TRUE) + 
        iqr_multiplier * IQR({{ variable }}, na.rm = TRUE)
    ) %>%
    ungroup()
  
  removed <- nrow(df) - nrow(cleaned_df)
  pct <- round(100 * removed / nrow(df), 1)
  cat("   ", var_name, ":", removed, "outliers removed (", pct, "%)\n")
  
  return(cleaned_df)
}

clean_force <- remove_outliers(data, force_based, agency_type3)
clean_contemporary <- remove_outliers(data, contemporary_study, agency_type3)
clean_special <- remove_outliers(data, special_study, agency_type3)
clean_inj <- remove_outliers(data, total_inj, agency_type3)
clean_incidents <- remove_outliers(data, total_incidents, agency_type3)

cat("\n")

# ============================================================================
# STEP 4: STATISTICAL TESTS
# ============================================================================

cat("Running Kruskal-Wallis and Dunn tests...\n")

run_kw_and_dunn <- function(df, yvar, label) {
  # Run Kruskal-Wallis
  kw_result <- kruskal.test(df[[yvar]] ~ df$agency_type3)
  
  # Run Dunn test
  dunn_result <- suppressWarnings(
    dunn.test(df[[yvar]], df$agency_type3, 
              method = "bonferroni", table = FALSE, list = FALSE)
  )
  
  # Extract p-values
  comparisons_made <- dunn_result$comparisons
  p_vals_adjusted <- dunn_result$P.adjusted
  p_lookup <- setNames(p_vals_adjusted, comparisons_made)
  
  # Create significance annotations
  get_sig <- function(p) {
    if(is.na(p)) return("ns")
    if(p < 0.001) return("***")
    if(p < 0.01) return("**")
    if(p < 0.05) return("*")
    return("ns")
  }
  
  # Map annotations for ggsignif (order: Reg-Col, Reg-Other, Col-Other)
  annotations <- c(
    get_sig(p_lookup["College - Regular"]),  # Note: reversed in output
    get_sig(p_lookup["Other - Regular"]),     # Note: reversed in output
    get_sig(p_lookup["College - Other"])
  )
  
  # Print results
  cat("   ", label, ": KW p =", format.pval(kw_result$p.value, digits = 3), "\n")
  
  return(list(kw = kw_result, dunn = dunn_result, annotations = annotations))
}

force_test <- run_kw_and_dunn(clean_force, "force_based", "Force-Based")
contemporary_test <- run_kw_and_dunn(clean_contemporary, "contemporary_study", "Contemporary")
special_test <- run_kw_and_dunn(clean_special, "special_study", "Special Topics")
inj_test <- run_kw_and_dunn(clean_inj, "total_inj", "Injuries")
incidents_test <- run_kw_and_dunn(clean_incidents, "total_incidents", "Incidents")

cat("\n")

# ============================================================================
# STEP 5: CREATE PLOTS
# ============================================================================

cat("Creating plots...\n")

# Define aesthetics
fill_colors <- c("Regular" = "#9ECAE1", "College" = "#BCBDDC", "Other" = "#D9D9D9")
comparisons <- list(c("Regular", "College"), c("Regular", "Other"), c("College", "Other"))

themed <- theme_minimal() + 
  theme(
    legend.position = "none",
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    axis.text.x = element_text(size = 14, face = "bold"),
    axis.title.y = element_text(size = 12),
    panel.grid.major.x = element_blank()
  )

# Create individual plots
p1 <- ggplot(clean_force, aes(x = agency_type3, y = force_based, fill = agency_type3)) +
  geom_boxplot(outlier.shape = NA, alpha = 0.7) + 
  geom_jitter(width = 0.15, alpha = 0.4, color = "black", size = 1.5) +
  geom_signif(comparisons = comparisons, annotations = force_test$annotations,
              step_increase = 0.1, textsize = 4) +
  labs(title = "Force-Based Training", y = "Factor Score", x = NULL) +
  scale_fill_manual(values = fill_colors) + 
  themed

p2 <- ggplot(clean_contemporary, aes(x = agency_type3, y = contemporary_study, fill = agency_type3)) +
  geom_boxplot(outlier.shape = NA, alpha = 0.7) + 
  geom_jitter(width = 0.15, alpha = 0.4, color = "black", size = 1.5) +
  geom_signif(comparisons = comparisons, annotations = contemporary_test$annotations,
              step_increase = 0.1, textsize = 4) +
  labs(title = "Contemporary Policing", y = "Factor Score", x = NULL) +
  scale_fill_manual(values = fill_colors) + 
  themed

p3 <- ggplot(clean_special, aes(x = agency_type3, y = special_study, fill = agency_type3)) +
  geom_boxplot(outlier.shape = NA, alpha = 0.7) + 
  geom_jitter(width = 0.15, alpha = 0.4, color = "black", size = 1.5) +
  geom_signif(comparisons = comparisons, annotations = special_test$annotations,
              step_increase = 0.1, textsize = 4) +
  labs(title = "Special Topics", y = "Factor Score", x = NULL) +
  scale_fill_manual(values = fill_colors) + 
  themed

p4 <- ggplot(clean_inj, aes(x = agency_type3, y = total_inj, fill = agency_type3)) +
  geom_boxplot(outlier.shape = NA, alpha = 0.7) + 
  geom_jitter(width = 0.15, alpha = 0.4, color = "black", size = 1.5) +
  geom_signif(comparisons = comparisons, annotations = inj_test$annotations,
              step_increase = 0.1, textsize = 4) +
  labs(title = "Total Injuries", y = "Count", x = NULL) +
  scale_fill_manual(values = fill_colors) + 
  themed

p5 <- ggplot(clean_incidents, aes(x = agency_type3, y = total_incidents, fill = agency_type3)) +
  geom_boxplot(outlier.shape = NA, alpha = 0.7) + 
  geom_jitter(width = 0.15, alpha = 0.4, color = "black", size = 1.5) +
  geom_signif(comparisons = comparisons, annotations = incidents_test$annotations,
              step_increase = 0.1, textsize = 4) +
  labs(title = "Total Incidents", y = "Count", x = NULL) +
  scale_fill_manual(values = fill_colors) + 
  themed

cat("   ✓ Individual plots created\n")

# Combine plots
training_plot <- (p1 | p2 | p3) + 
  plot_layout(guides = "collect") + 
  plot_annotation(title = "Training Factor Scores by Agency Type") &
  theme(legend.position = "bottom")

outcome_plot <- (p4 | p5) + 
  plot_layout(guides = "collect") + 
  plot_annotation(title = "Injury and Incident Outcomes by Agency Type") &
  theme(legend.position = "bottom")

all_plots <- (p1 | p2 | p3) / (p4 | p5 | plot_spacer()) +
  plot_layout(guides = "collect") + 
  plot_annotation(
    title = "Kruskal-Wallis Analysis: Training Factors and Outcomes by Agency Type",
    subtitle = "*** p < 0.001, ** p < 0.01, * p < 0.05, ns = not significant"
  ) &
  theme(legend.position = "bottom")

cat("   ✓ Combined plots created\n\n")

# ============================================================================
# STEP 6: CREATE SUMMARY TABLES
# ============================================================================

cat("Creating summary tables...\n")

create_summary <- function(data_list, var_names) {
  results <- list()
  for(i in seq_along(var_names)) {
    df <- data_list[[i]]
    var <- var_names[i]
    summary_stats <- df %>%
      group_by(agency_type3) %>%
      summarise(
        Variable = var,
        n = n(),
        Mean = round(mean(!!sym(var), na.rm = TRUE), 2),
        SD = round(sd(!!sym(var), na.rm = TRUE), 2),
        Median = round(median(!!sym(var), na.rm = TRUE), 2)
      )
    results[[i]] <- summary_stats
  }
  bind_rows(results)
}

cleaned_list <- list(clean_force, clean_contemporary, clean_special, clean_inj, clean_incidents)
var_names <- c("force_based", "contemporary_study", "special_study", "total_inj", "total_incidents")
summary_table_cleaned <- create_summary(cleaned_list, var_names)

cat("   ✓ Summary tables created\n\n")

# ============================================================================
# STEP 7: EXPORT TO DOWNLOADS (USING DIRECT JPEG METHOD)
# ============================================================================

cat("============================================================================\n")
cat("EXPORTING FILES TO DOWNLOADS FOLDER\n")
cat("============================================================================\n\n")

# Set working directory to Downloads
setwd("~/Downloads")
cat("Working directory set to:", getwd(), "\n\n")

# Save plots using jpeg() device
cat("Saving JPEG files...\n")

# Plot 1: Training factors
jpeg("training_factors_comparison.jpg", 
     width = 18, height = 7, units = "in", res = 900)
print(training_plot)
dev.off()
cat("  ✓ Saved: training_factors_comparison.jpg\n")

# Plot 2: Outcomes
jpeg("outcomes_comparison.jpg", 
     width = 14, height = 7, units = "in", res = 900)
print(outcome_plot)
dev.off()
cat("  ✓ Saved: outcomes_comparison.jpg\n")

# Plot 3: All variables combined
jpeg("all_variables_comparison.jpg", 
     width = 20, height = 14, units = "in", res = 900)
print(all_plots)
dev.off()
cat("  ✓ Saved: all_variables_comparison.jpg\n")

# Save CSV file
write.csv(summary_table_cleaned, "summary_statistics.csv", row.names = FALSE)
cat("  ✓ Saved: summary_statistics.csv\n\n")

# ============================================================================
# VERIFICATION
# ============================================================================

cat("============================================================================\n")
cat("ANALYSIS COMPLETE!\n")
cat("============================================================================\n\n")

# List created files
cat("Files created in Downloads folder:\n")
files <- list.files(getwd(), pattern = "comparison|statistics")
for(f in files) {
  size_mb <- round(file.info(f)$size / 1024 / 1024, 2)
  cat("  •", f, sprintf("(%.2f MB)\n", size_mb))
}

cat("\n")
cat("Key Findings:\n")
cat("- Force-Based Training: Regular > College (p < 0.001)\n")
cat("- Total Injuries: Regular > College & Other (p < 0.001)\n")
cat("- Total Incidents: Regular > College & Other (p < 0.001)\n")
cat("- Contemporary & Special Topics: No significant differences\n")
cat("\n")

# Open Downloads folder in Finder
system("open .")
cat("Downloads folder opened in Finder\n")
cat("============================================================================\n")
